/* Generated by MLVC Compiler */

.offset 0x8000
.offset 0x8000

LND $mlvc_program_start JMP


/* Begin MLVC include gamepad */
.set mlvc_static_var_gamepad_buttons_ret 0x400

/* MLVC function gamepad_buttons */
mlvc_function_gamepad_buttons:
    /* Begin MLVC asm block */
    LND
    0x6080
    RDA
    LND
    $mlvc_static_var_gamepad_buttons_ret
    WRA
    /* End MLVC asm block */
    RET


/* End MLVC include gamepad */


/* Begin MLVC include graphics */

/* MLVC function screen_clear */
mlvc_function_screen_clear:
    LNA 1
    LND 0x6004 WRA
    RET


/* MLVC function screen_flip */
mlvc_function_screen_flip:
    LNA 1
    LND 0x6003 WRA
    RET

.set mlvc_static_var_pix_x 0x401
.set mlvc_static_var_pix_y 0x402
.set mlvc_static_var_pix_c 0x403

/* MLVC function set_pixel */
mlvc_function_set_pixel:
    LND $mlvc_static_var_pix_x RDA
    LND 0x6000 WRA
    LND $mlvc_static_var_pix_y RDA
    LND 0x6001 WRA
    LND $mlvc_static_var_pix_c RDA
    LND 0x6002 WRA
    RET

.set mlvc_static_var_rect_x 0x404
.set mlvc_static_var_rect_y 0x405
.set mlvc_static_var_rect_w 0x406
.set mlvc_static_var_rect_h 0x407
.set mlvc_static_var_rect_c 0x408
.set mlvc_static_var__rect_i 0x409
.set mlvc_static_var__rect_j 0x40a

/* MLVC function draw_rect */
mlvc_function_draw_rect:
    LNA 0
    LND $mlvc_static_var__rect_i WRA
    LNA 0
    LND $mlvc_static_var__rect_j WRA
loop_0_begin: /* Begin MLVC while block */
    /* MLVC if expression */
    LND $mlvc_static_var_rect_w RDB
    LND $mlvc_static_var__rect_i RDA
    LTC
    LND $loop_0_end JNC /* MLVC while conditional */
    LND $mlvc_static_var__rect_i RDB
    LND $mlvc_static_var_rect_x RDA
    ADD
    LND 0x6000 WRC
loop_1_begin: /* Begin MLVC while block */
    /* MLVC if expression */
    LND $mlvc_static_var_rect_h RDB
    LND $mlvc_static_var__rect_j RDA
    LTC
    LND $loop_1_end JNC /* MLVC while conditional */
    LND $mlvc_static_var__rect_j RDB
    LND $mlvc_static_var_rect_y RDA
    ADD
    LND 0x6001 WRC
    LND $mlvc_static_var_rect_c RDA
    LND 0x6002 WRA
    LNB 1
    LND $mlvc_static_var__rect_j RDA
    ADD
    LND $mlvc_static_var__rect_j WRC
    LND $loop_1_begin JMP
loop_1_end: /* End MLVC while block */
    LNA 0
    LND $mlvc_static_var__rect_j WRA
    LNB 1
    LND $mlvc_static_var__rect_i RDA
    ADD
    LND $mlvc_static_var__rect_i WRC
    LND $loop_0_begin JMP
loop_0_end: /* End MLVC while block */
    RET


/* End MLVC include graphics */


/* Begin MLVC include system */

/* MLVC function exit */
mlvc_function_exit:
    /* Begin MLVC asm block */
    HLT
    /* End MLVC asm block */
    RET


/* End MLVC include system */


/* Begin MLVC include time */
.set mlvc_static_var_sleep_ms_n 0x40b
.set mlvc_static_var__sleep_ms_p 0x40c

/* MLVC function sleep_ms */
mlvc_function_sleep_ms:
    LNA 0
    LND 0x610F WRA
    LNA 0
    LND $mlvc_static_var__sleep_ms_p WRA
loop_2_begin: /* Begin MLVC while block */
    /* MLVC if expression */
    LND $mlvc_static_var_sleep_ms_n RDB
    LND $mlvc_static_var__sleep_ms_p RDA
    LTC
    LND $loop_2_end JNC /* MLVC while conditional */
    /* Begin MLVC asm block */
    LND
    0x6100
    RDA
    LND
    $mlvc_static_var__sleep_ms_p
    WRA
    /* End MLVC asm block */
    LND $loop_2_begin JMP
loop_2_end: /* End MLVC while block */
    RET

.set mlvc_static_var_sleep_dms_n 0x40d
.set mlvc_static_var__sleep_dms_p 0x40e

/* MLVC function sleep_dms */
mlvc_function_sleep_dms:
    LNA 0
    LND 0x610F WRA
    LNA 0
    LND $mlvc_static_var__sleep_dms_p WRA
loop_3_begin: /* Begin MLVC while block */
    /* MLVC if expression */
    LND $mlvc_static_var_sleep_dms_n RDB
    LND $mlvc_static_var__sleep_dms_p RDA
    LTC
    LND $loop_3_end JNC /* MLVC while conditional */
    /* Begin MLVC asm block */
    LND
    0x6101
    RDA
    LND
    $mlvc_static_var__sleep_dms_p
    WRA
    /* End MLVC asm block */
    LND $loop_3_begin JMP
loop_3_end: /* End MLVC while block */
    RET


/* MLVC function reset_timers */
mlvc_function_reset_timers:
    LNA 0
    LND 0x610F WRA
    RET

.set mlvc_static_var_get_ms_time_ret 0x40f

/* MLVC function get_ms_time */
mlvc_function_get_ms_time:
    /* Begin MLVC asm block */
    LND
    0x6100
    RDA
    LND
    $mlvc_static_var_get_ms_time_ret
    WRA
    /* End MLVC asm block */
    RET

.set mlvc_static_var_get_dms_time_ret 0x410

/* MLVC function get_dms_time */
mlvc_function_get_dms_time:
    /* Begin MLVC asm block */
    LND
    0x6101
    RDA
    LND
    $mlvc_static_var_get_dms_time_ret
    WRA
    /* End MLVC asm block */
    RET

.set mlvc_static_var_get_hms_time_ret 0x411

/* MLVC function get_hms_time */
mlvc_function_get_hms_time:
    /* Begin MLVC asm block */
    LND
    0x6102
    RDA
    LND
    $mlvc_static_var_get_hms_time_ret
    WRA
    /* End MLVC asm block */
    RET


/* End MLVC include time */

.set mlvc_static_var_ball_x 0x412
.set mlvc_static_var_ball_y 0x413
.set mlvc_static_var_paddle_x 0x414
.set mlvc_static_var_ball_vx 0x415
.set mlvc_static_var_ball_vy 0x416
.set mlvc_static_var_score 0x417

mlvc_program_start:
    LNA 0
    LND $mlvc_static_var_score WRA
    LNA 60
    LND $mlvc_static_var_ball_x WRA
    LNA 0
    LND $mlvc_static_var_ball_y WRA
    LNA 0xFF
    LND $mlvc_static_var_ball_vx WRA
    LNA 1
    LND $mlvc_static_var_ball_vy WRA
    LNA 2
    LND $mlvc_static_var_paddle_x WRA
loop_4_begin: /* Begin MLVC while block */
    /* MLVC if expression */
    LNA 1
    LND $loop_4_end JNA /* MLVC while conditional */
    LND $mlvc_function_reset_timers SRT /* Calling MLVC function reset_timers */
    LND $mlvc_function_screen_clear SRT /* Calling MLVC function screen_clear */
    LND $mlvc_function_gamepad_buttons SRT /* Calling MLVC function gamepad_buttons */
    /* MLVC if expression */
    LNB 0x02
    LND $mlvc_static_var_gamepad_buttons_ret RDA
    AND
    PSH
    LNB 10
    LNA 64
    SUB
    PSH
    PUL SBC
    LND $mlvc_static_var_paddle_x RDA
    LTC
    PSH
    PUL SBC
    PUL SAC
    ANL
    LND $conditional_0_else JNC /* MLVC if conditional */
    LNB 1
    LND $mlvc_static_var_paddle_x RDA
    ADD
    LND $mlvc_static_var_paddle_x WRC
conditional_0_else: /* End MLVC if statement */
    /* MLVC if expression */
    LNB 0x01
    LND $mlvc_static_var_gamepad_buttons_ret RDA
    AND
    PSH
    LNB 0
    LND $mlvc_static_var_paddle_x RDA
    GTC
    PSH
    PUL SBC
    PUL SAC
    ANL
    LND $conditional_1_else JNC /* MLVC if conditional */
    LNB 1
    LND $mlvc_static_var_paddle_x RDA
    SUB
    LND $mlvc_static_var_paddle_x WRC
conditional_1_else: /* End MLVC if statement */
    LND $mlvc_static_var_ball_vx RDB
    LND $mlvc_static_var_ball_x RDA
    ADD
    LND $mlvc_static_var_ball_x WRC
    LND $mlvc_static_var_ball_vy RDB
    LND $mlvc_static_var_ball_y RDA
    ADD
    LND $mlvc_static_var_ball_y WRC
    /* MLVC if expression */
    LNB 3
    LNA 64
    SUB
    PSH
    PUL SBC
    LND $mlvc_static_var_ball_x RDA
    CMP
    PSH
    LNB 1
    LND $mlvc_static_var_ball_vx RDA
    CMP
    PSH
    PUL SBC
    PUL SAC
    ANL
    LND $conditional_2_else JNC /* MLVC if conditional */
    LNA 0xFF
    LND $mlvc_static_var_ball_vx WRA
conditional_2_else: /* End MLVC if statement */
    /* MLVC if expression */
    LNB 0
    LND $mlvc_static_var_ball_x RDA
    CMP
    PSH
    LNB 0xFF
    LND $mlvc_static_var_ball_vx RDA
    CMP
    PSH
    PUL SBC
    PUL SAC
    ANL
    LND $conditional_3_else JNC /* MLVC if conditional */
    LNA 1
    LND $mlvc_static_var_ball_vx WRA
conditional_3_else: /* End MLVC if statement */
    /* MLVC if expression */
    LNB 0
    LND $mlvc_static_var_ball_y RDA
    CMP
    PSH
    LNB 0xFF
    LND $mlvc_static_var_ball_vy RDA
    CMP
    PSH
    PUL SBC
    PUL SAC
    ANL
    LND $conditional_4_else JNC /* MLVC if conditional */
    LNA 1
    LND $mlvc_static_var_ball_vy WRA
    LNB 1
    LND $mlvc_static_var_score RDA
    ADD
    LND $mlvc_static_var_score WRC
conditional_4_else: /* End MLVC if statement */
    /* MLVC if expression */
    LNB 3
    LNA 60
    SUB
    PSH
    PUL SBC
    LND $mlvc_static_var_ball_y RDA
    CMP
    PSH
    LNB 1
    LND $mlvc_static_var_ball_vy RDA
    CMP
    PSH
    PUL SBC
    PUL SAC
    ANL
    PSH
    LNB 3
    LND $mlvc_static_var_ball_x RDA
    ADD
    PSH
    LND $mlvc_static_var_paddle_x RDB
    PUL SAC
    GTC
    PSH
    PUL SBC
    PUL SAC
    ANL
    PSH
    LNB 10
    LND $mlvc_static_var_paddle_x RDA
    ADD
    PSH
    LNB 3
    PUL SAC
    ADD
    PSH
    PUL SBC
    LND $mlvc_static_var_ball_x RDA
    LTC
    PSH
    PUL SBC
    PUL SAC
    ANL
    LND $conditional_5_else JNC /* MLVC if conditional */
    LNA 0xFF
    LND $mlvc_static_var_ball_vy WRA
conditional_5_else: /* End MLVC if statement */
    /* MLVC if expression */
    LNB 64
    LND $mlvc_static_var_ball_y RDA
    CMP
    LND $conditional_6_else JNC /* MLVC if conditional */
    LND $mlvc_function_exit SRT /* Calling MLVC function exit */
conditional_6_else: /* End MLVC if statement */
    LND $mlvc_static_var_ball_x RDA
    LND $mlvc_static_var_rect_x WRA
    LND $mlvc_static_var_ball_y RDA
    LND $mlvc_static_var_rect_y WRA
    LNA 3
    LND $mlvc_static_var_rect_w WRA
    LNA 3
    LND $mlvc_static_var_rect_h WRA
    LNA 0xF7
    LND $mlvc_static_var_rect_c WRA
    LND $mlvc_function_draw_rect SRT /* Calling MLVC function draw_rect */
    LND $mlvc_static_var_paddle_x RDA
    LND $mlvc_static_var_rect_x WRA
    LNA 60
    LND $mlvc_static_var_rect_y WRA
    LNA 10
    LND $mlvc_static_var_rect_w WRA
    LNA 2
    LND $mlvc_static_var_rect_h WRA
    LNA 0xE4
    LND $mlvc_static_var_rect_c WRA
    LND $mlvc_function_draw_rect SRT /* Calling MLVC function draw_rect */
    LNA 1
    LND $mlvc_static_var_rect_x WRA
    LNA 1
    LND $mlvc_static_var_rect_y WRA
    LND $mlvc_static_var_score RDA
    LND $mlvc_static_var_rect_w WRA
    LNA 1
    LND $mlvc_static_var_rect_h WRA
    LNA 0b11111001
    LND $mlvc_static_var_rect_c WRA
    LND $mlvc_function_draw_rect SRT /* Calling MLVC function draw_rect */
    LND $mlvc_function_screen_flip SRT /* Calling MLVC function screen_flip */
    LND $mlvc_function_get_hms_time SRT /* Calling MLVC function get_hms_time */
    /* Begin MLVC asm block */
    DLA
    /* End MLVC asm block */
    LND $mlvc_function_get_dms_time SRT /* Calling MLVC function get_dms_time */
    LND $mlvc_static_var_get_dms_time_ret RDB
    LNA 167
    SUB
    LND $mlvc_static_var_sleep_dms_n WRC
    LND $mlvc_function_sleep_dms SRT /* Calling MLVC function sleep_dms */
    LND $loop_4_begin JMP
loop_4_end: /* End MLVC while block */
